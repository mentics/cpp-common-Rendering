[1mdiff --git a/src/FragmentShader.glsl b/src/FragmentShader.glsl[m
[1mindex f69d625..c2f1059 100644[m
[1m--- a/src/FragmentShader.glsl[m
[1m+++ b/src/FragmentShader.glsl[m
[36m@@ -33,8 +33,8 @@[m [mvec3 getRay() {[m
 [m
 void main() {[m
 	vec3 ray = normalize(getRay());[m
[31m-	//for (int i=0; i<index.objects.length(); i++) {[m
[31m-	for (int i = 211; i < 212; i++) {[m
[32m+[m	[32mfor (int i=0; i<index.objects.length(); i++) {[m
[32m+[m	[32m//for (int i = 211; i < 212; i++) {[m
 		if (intersectSphere(ray, index.objects[i])) {[m
 			outColor = vec4(0, 1, 0, 1);[m
 			break;[m
[1mdiff --git a/src/fullscreenquad.cpp b/src/fullscreenquad.cpp[m
[1mindex 590c41d..8cf105f 100644[m
[1m--- a/src/fullscreenquad.cpp[m
[1m+++ b/src/fullscreenquad.cpp[m
[36m@@ -188,7 +188,7 @@[m [mint main() {[m
 	glGenBuffers(1, &worldId);[m
 	glBindBuffer(GL_SHADER_STORAGE_BUFFER, worldId);[m
 	glBufferData(GL_SHADER_STORAGE_BUFFER, sizeof(WorldObject) * numWorldObjects, &world, GL_DYNAMIC_COPY);[m
[31m-	std::cout << "World Object 211: " << world[211].pos.x << std::endl;[m
[32m+[m	[32m//std::cout << "World Object 211: " << world[211].pos.x << std::endl;[m
 [m
 	// Counter Buffer[m
 	GLuint counterBuffer;[m
[36m@@ -220,13 +220,12 @@[m [mint main() {[m
 	GLuint vao;[m
 	glGenVertexArrays(1, &vao);[m
 	glBindVertexArray(vao);[m
[31m-	[m
[32m+[m
 	GLuint vertexbuffer;[m
 	glGenBuffers(1, &vertexbuffer);[m
 	glBindBuffer(GL_ARRAY_BUFFER, vertexbuffer);[m
 	glBufferData(GL_ARRAY_BUFFER, sizeof(g_vertex_buffer_data), g_vertex_buffer_data, GL_STATIC_DRAW);[m
 	glBindBuffer(GL_SHADER_STORAGE_BUFFER, 0);[m
[31m-[m
 	[m
 	const int windowSize = 20;  [m
 	uint64_t frameTimes[windowSize];[m
[36m@@ -308,12 +307,12 @@[m [mint main() {[m
 		glBindBuffer(GL_SHADER_STORAGE_BUFFER, indexId);[m
 		Sphere *ptrToIndexData = (Sphere*)glMapBuffer(GL_SHADER_STORAGE_BUFFER, GL_READ_ONLY); [m
 		int testItem = 500;[m
[31m-		std::cout << '[' << ptrToIndexData[testItem].center.x[m
[31m-			<< ',' << ptrToIndexData[testItem].center.y[m
[31m-			<< ',' << ptrToIndexData[testItem].center.z[m
[31m-			<< ',' << ptrToIndexData[testItem].center2[m
[31m-			<< ',' << ptrToIndexData[testItem].radius2[m
[31m-			<< ']';[m
[32m+[m		[32m//std::cout << '[' << ptrToIndexData[testItem].center.x[m
[32m+[m		[32m//	<< ',' << ptrToIndexData[testItem].center.y[m
[32m+[m		[32m//	<< ',' << ptrToIndexData[testItem].center.z[m
[32m+[m		[32m//	<< ',' << ptrToIndexData[testItem].center2[m
[32m+[m		[32m//	<< ',' << ptrToIndexData[testItem].radius2[m
[32m+[m		[32m//	<< ']';[m
 		glUnmapBuffer(GL_SHADER_STORAGE_BUFFER);[m
 [m
 [m
